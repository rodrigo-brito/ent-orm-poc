// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/song"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// SongCreate is the builder for creating a Song entity.
type SongCreate struct {
	config
	name   *int
	phone  *string
	plays  *int64
	gender *song.Gender
}

// SetName sets the name field.
func (sc *SongCreate) SetName(i int) *SongCreate {
	sc.name = &i
	return sc
}

// SetPhone sets the phone field.
func (sc *SongCreate) SetPhone(s string) *SongCreate {
	sc.phone = &s
	return sc
}

// SetNillablePhone sets the phone field if the given value is not nil.
func (sc *SongCreate) SetNillablePhone(s *string) *SongCreate {
	if s != nil {
		sc.SetPhone(*s)
	}
	return sc
}

// SetPlays sets the plays field.
func (sc *SongCreate) SetPlays(i int64) *SongCreate {
	sc.plays = &i
	return sc
}

// SetGender sets the gender field.
func (sc *SongCreate) SetGender(s song.Gender) *SongCreate {
	sc.gender = &s
	return sc
}

// Save creates the Song in the database.
func (sc *SongCreate) Save(ctx context.Context) (*Song, error) {
	if sc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if err := song.NameValidator(*sc.name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
	}
	if sc.plays == nil {
		return nil, errors.New("ent: missing required field \"plays\"")
	}
	if err := song.PlaysValidator(*sc.plays); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"plays\": %v", err)
	}
	if sc.gender == nil {
		return nil, errors.New("ent: missing required field \"gender\"")
	}
	if err := song.GenderValidator(*sc.gender); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"gender\": %v", err)
	}
	return sc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SongCreate) SaveX(ctx context.Context) *Song {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SongCreate) sqlSave(ctx context.Context) (*Song, error) {
	var (
		s     = &Song{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: song.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: song.FieldID,
			},
		}
	)
	if value := sc.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: song.FieldName,
		})
		s.Name = *value
	}
	if value := sc.phone; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: song.FieldPhone,
		})
		s.Phone = value
	}
	if value := sc.plays; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: song.FieldPlays,
		})
		s.Plays = *value
	}
	if value := sc.gender; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: song.FieldGender,
		})
		s.Gender = *value
	}
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}
