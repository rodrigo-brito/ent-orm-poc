// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/artist"
	"enttest/ent/song"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ArtistCreate is the builder for creating a Artist entity.
type ArtistCreate struct {
	config
	slug   *string
	age    *int
	phone  *string
	plays  *int64
	gender *artist.Gender
	songs  map[int]struct{}
}

// SetSlug sets the slug field.
func (ac *ArtistCreate) SetSlug(s string) *ArtistCreate {
	ac.slug = &s
	return ac
}

// SetAge sets the age field.
func (ac *ArtistCreate) SetAge(i int) *ArtistCreate {
	ac.age = &i
	return ac
}

// SetPhone sets the phone field.
func (ac *ArtistCreate) SetPhone(s string) *ArtistCreate {
	ac.phone = &s
	return ac
}

// SetNillablePhone sets the phone field if the given value is not nil.
func (ac *ArtistCreate) SetNillablePhone(s *string) *ArtistCreate {
	if s != nil {
		ac.SetPhone(*s)
	}
	return ac
}

// SetPlays sets the plays field.
func (ac *ArtistCreate) SetPlays(i int64) *ArtistCreate {
	ac.plays = &i
	return ac
}

// SetGender sets the gender field.
func (ac *ArtistCreate) SetGender(a artist.Gender) *ArtistCreate {
	ac.gender = &a
	return ac
}

// AddSongIDs adds the songs edge to Song by ids.
func (ac *ArtistCreate) AddSongIDs(ids ...int) *ArtistCreate {
	if ac.songs == nil {
		ac.songs = make(map[int]struct{})
	}
	for i := range ids {
		ac.songs[ids[i]] = struct{}{}
	}
	return ac
}

// AddSongs adds the songs edges to Song.
func (ac *ArtistCreate) AddSongs(s ...*Song) *ArtistCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSongIDs(ids...)
}

// Save creates the Artist in the database.
func (ac *ArtistCreate) Save(ctx context.Context) (*Artist, error) {
	if ac.slug == nil {
		return nil, errors.New("ent: missing required field \"slug\"")
	}
	if ac.age == nil {
		return nil, errors.New("ent: missing required field \"age\"")
	}
	if err := artist.AgeValidator(*ac.age); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"age\": %v", err)
	}
	if ac.plays == nil {
		return nil, errors.New("ent: missing required field \"plays\"")
	}
	if err := artist.PlaysValidator(*ac.plays); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"plays\": %v", err)
	}
	if ac.gender == nil {
		return nil, errors.New("ent: missing required field \"gender\"")
	}
	if err := artist.GenderValidator(*ac.gender); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"gender\": %v", err)
	}
	return ac.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ArtistCreate) SaveX(ctx context.Context) *Artist {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *ArtistCreate) sqlSave(ctx context.Context) (*Artist, error) {
	var (
		a     = &Artist{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: artist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: artist.FieldID,
			},
		}
	)
	if value := ac.slug; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: artist.FieldSlug,
		})
		a.Slug = *value
	}
	if value := ac.age; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: artist.FieldAge,
		})
		a.Age = *value
	}
	if value := ac.phone; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: artist.FieldPhone,
		})
		a.Phone = value
	}
	if value := ac.plays; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: artist.FieldPlays,
		})
		a.Plays = *value
	}
	if value := ac.gender; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: artist.FieldGender,
		})
		a.Gender = *value
	}
	if nodes := ac.songs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artist.SongsTable,
			Columns: []string{artist.SongsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: song.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}
