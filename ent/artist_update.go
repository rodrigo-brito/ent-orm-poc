// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/artist"
	"enttest/ent/predicate"
	"enttest/ent/song"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ArtistUpdate is the builder for updating Artist entities.
type ArtistUpdate struct {
	config
	slug         *string
	age          *int
	addage       *int
	phone        *string
	clearphone   bool
	plays        *int64
	addplays     *int64
	gender       *artist.Gender
	songs        map[int]struct{}
	removedSongs map[int]struct{}
	predicates   []predicate.Artist
}

// Where adds a new predicate for the builder.
func (au *ArtistUpdate) Where(ps ...predicate.Artist) *ArtistUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetSlug sets the slug field.
func (au *ArtistUpdate) SetSlug(s string) *ArtistUpdate {
	au.slug = &s
	return au
}

// SetAge sets the age field.
func (au *ArtistUpdate) SetAge(i int) *ArtistUpdate {
	au.age = &i
	au.addage = nil
	return au
}

// AddAge adds i to age.
func (au *ArtistUpdate) AddAge(i int) *ArtistUpdate {
	if au.addage == nil {
		au.addage = &i
	} else {
		*au.addage += i
	}
	return au
}

// SetPhone sets the phone field.
func (au *ArtistUpdate) SetPhone(s string) *ArtistUpdate {
	au.phone = &s
	return au
}

// SetNillablePhone sets the phone field if the given value is not nil.
func (au *ArtistUpdate) SetNillablePhone(s *string) *ArtistUpdate {
	if s != nil {
		au.SetPhone(*s)
	}
	return au
}

// ClearPhone clears the value of phone.
func (au *ArtistUpdate) ClearPhone() *ArtistUpdate {
	au.phone = nil
	au.clearphone = true
	return au
}

// SetPlays sets the plays field.
func (au *ArtistUpdate) SetPlays(i int64) *ArtistUpdate {
	au.plays = &i
	au.addplays = nil
	return au
}

// AddPlays adds i to plays.
func (au *ArtistUpdate) AddPlays(i int64) *ArtistUpdate {
	if au.addplays == nil {
		au.addplays = &i
	} else {
		*au.addplays += i
	}
	return au
}

// SetGender sets the gender field.
func (au *ArtistUpdate) SetGender(a artist.Gender) *ArtistUpdate {
	au.gender = &a
	return au
}

// AddSongIDs adds the songs edge to Song by ids.
func (au *ArtistUpdate) AddSongIDs(ids ...int) *ArtistUpdate {
	if au.songs == nil {
		au.songs = make(map[int]struct{})
	}
	for i := range ids {
		au.songs[ids[i]] = struct{}{}
	}
	return au
}

// AddSongs adds the songs edges to Song.
func (au *ArtistUpdate) AddSongs(s ...*Song) *ArtistUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSongIDs(ids...)
}

// RemoveSongIDs removes the songs edge to Song by ids.
func (au *ArtistUpdate) RemoveSongIDs(ids ...int) *ArtistUpdate {
	if au.removedSongs == nil {
		au.removedSongs = make(map[int]struct{})
	}
	for i := range ids {
		au.removedSongs[ids[i]] = struct{}{}
	}
	return au
}

// RemoveSongs removes songs edges to Song.
func (au *ArtistUpdate) RemoveSongs(s ...*Song) *ArtistUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSongIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *ArtistUpdate) Save(ctx context.Context) (int, error) {
	if au.age != nil {
		if err := artist.AgeValidator(*au.age); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"age\": %v", err)
		}
	}
	if au.plays != nil {
		if err := artist.PlaysValidator(*au.plays); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"plays\": %v", err)
		}
	}
	if au.gender != nil {
		if err := artist.GenderValidator(*au.gender); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"gender\": %v", err)
		}
	}
	return au.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArtistUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArtistUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArtistUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ArtistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   artist.Table,
			Columns: artist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: artist.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := au.slug; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: artist.FieldSlug,
		})
	}
	if value := au.age; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: artist.FieldAge,
		})
	}
	if value := au.addage; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: artist.FieldAge,
		})
	}
	if value := au.phone; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: artist.FieldPhone,
		})
	}
	if au.clearphone {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: artist.FieldPhone,
		})
	}
	if value := au.plays; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: artist.FieldPlays,
		})
	}
	if value := au.addplays; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: artist.FieldPlays,
		})
	}
	if value := au.gender; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: artist.FieldGender,
		})
	}
	if nodes := au.removedSongs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artist.SongsTable,
			Columns: []string{artist.SongsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: song.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.songs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artist.SongsTable,
			Columns: []string{artist.SongsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: song.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ArtistUpdateOne is the builder for updating a single Artist entity.
type ArtistUpdateOne struct {
	config
	id           int
	slug         *string
	age          *int
	addage       *int
	phone        *string
	clearphone   bool
	plays        *int64
	addplays     *int64
	gender       *artist.Gender
	songs        map[int]struct{}
	removedSongs map[int]struct{}
}

// SetSlug sets the slug field.
func (auo *ArtistUpdateOne) SetSlug(s string) *ArtistUpdateOne {
	auo.slug = &s
	return auo
}

// SetAge sets the age field.
func (auo *ArtistUpdateOne) SetAge(i int) *ArtistUpdateOne {
	auo.age = &i
	auo.addage = nil
	return auo
}

// AddAge adds i to age.
func (auo *ArtistUpdateOne) AddAge(i int) *ArtistUpdateOne {
	if auo.addage == nil {
		auo.addage = &i
	} else {
		*auo.addage += i
	}
	return auo
}

// SetPhone sets the phone field.
func (auo *ArtistUpdateOne) SetPhone(s string) *ArtistUpdateOne {
	auo.phone = &s
	return auo
}

// SetNillablePhone sets the phone field if the given value is not nil.
func (auo *ArtistUpdateOne) SetNillablePhone(s *string) *ArtistUpdateOne {
	if s != nil {
		auo.SetPhone(*s)
	}
	return auo
}

// ClearPhone clears the value of phone.
func (auo *ArtistUpdateOne) ClearPhone() *ArtistUpdateOne {
	auo.phone = nil
	auo.clearphone = true
	return auo
}

// SetPlays sets the plays field.
func (auo *ArtistUpdateOne) SetPlays(i int64) *ArtistUpdateOne {
	auo.plays = &i
	auo.addplays = nil
	return auo
}

// AddPlays adds i to plays.
func (auo *ArtistUpdateOne) AddPlays(i int64) *ArtistUpdateOne {
	if auo.addplays == nil {
		auo.addplays = &i
	} else {
		*auo.addplays += i
	}
	return auo
}

// SetGender sets the gender field.
func (auo *ArtistUpdateOne) SetGender(a artist.Gender) *ArtistUpdateOne {
	auo.gender = &a
	return auo
}

// AddSongIDs adds the songs edge to Song by ids.
func (auo *ArtistUpdateOne) AddSongIDs(ids ...int) *ArtistUpdateOne {
	if auo.songs == nil {
		auo.songs = make(map[int]struct{})
	}
	for i := range ids {
		auo.songs[ids[i]] = struct{}{}
	}
	return auo
}

// AddSongs adds the songs edges to Song.
func (auo *ArtistUpdateOne) AddSongs(s ...*Song) *ArtistUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSongIDs(ids...)
}

// RemoveSongIDs removes the songs edge to Song by ids.
func (auo *ArtistUpdateOne) RemoveSongIDs(ids ...int) *ArtistUpdateOne {
	if auo.removedSongs == nil {
		auo.removedSongs = make(map[int]struct{})
	}
	for i := range ids {
		auo.removedSongs[ids[i]] = struct{}{}
	}
	return auo
}

// RemoveSongs removes songs edges to Song.
func (auo *ArtistUpdateOne) RemoveSongs(s ...*Song) *ArtistUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSongIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (auo *ArtistUpdateOne) Save(ctx context.Context) (*Artist, error) {
	if auo.age != nil {
		if err := artist.AgeValidator(*auo.age); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"age\": %v", err)
		}
	}
	if auo.plays != nil {
		if err := artist.PlaysValidator(*auo.plays); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"plays\": %v", err)
		}
	}
	if auo.gender != nil {
		if err := artist.GenderValidator(*auo.gender); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"gender\": %v", err)
		}
	}
	return auo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArtistUpdateOne) SaveX(ctx context.Context) *Artist {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *ArtistUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArtistUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ArtistUpdateOne) sqlSave(ctx context.Context) (a *Artist, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   artist.Table,
			Columns: artist.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  auo.id,
				Type:   field.TypeInt,
				Column: artist.FieldID,
			},
		},
	}
	if value := auo.slug; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: artist.FieldSlug,
		})
	}
	if value := auo.age; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: artist.FieldAge,
		})
	}
	if value := auo.addage; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: artist.FieldAge,
		})
	}
	if value := auo.phone; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: artist.FieldPhone,
		})
	}
	if auo.clearphone {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: artist.FieldPhone,
		})
	}
	if value := auo.plays; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: artist.FieldPlays,
		})
	}
	if value := auo.addplays; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: artist.FieldPlays,
		})
	}
	if value := auo.gender; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: artist.FieldGender,
		})
	}
	if nodes := auo.removedSongs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artist.SongsTable,
			Columns: []string{artist.SongsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: song.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.songs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artist.SongsTable,
			Columns: []string{artist.SongsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: song.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	a = &Artist{config: auo.config}
	_spec.Assign = a.assignValues
	_spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
