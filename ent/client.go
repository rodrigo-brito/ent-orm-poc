// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"enttest/ent/migrate"

	"enttest/ent/artist"
	"enttest/ent/song"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Artist is the client for interacting with the Artist builders.
	Artist *ArtistClient
	// Song is the client for interacting with the Song builders.
	Song *SongClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config: c,
		Schema: migrate.NewSchema(c.driver),
		Artist: NewArtistClient(c),
		Song:   NewSongClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config: cfg,
		Artist: NewArtistClient(cfg),
		Song:   NewSongClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Artist.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config: cfg,
		Schema: migrate.NewSchema(cfg.driver),
		Artist: NewArtistClient(cfg),
		Song:   NewSongClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// ArtistClient is a client for the Artist schema.
type ArtistClient struct {
	config
}

// NewArtistClient returns a client for the Artist from the given config.
func NewArtistClient(c config) *ArtistClient {
	return &ArtistClient{config: c}
}

// Create returns a create builder for Artist.
func (c *ArtistClient) Create() *ArtistCreate {
	return &ArtistCreate{config: c.config}
}

// Update returns an update builder for Artist.
func (c *ArtistClient) Update() *ArtistUpdate {
	return &ArtistUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArtistClient) UpdateOne(a *Artist) *ArtistUpdateOne {
	return c.UpdateOneID(a.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ArtistClient) UpdateOneID(id int) *ArtistUpdateOne {
	return &ArtistUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Artist.
func (c *ArtistClient) Delete() *ArtistDelete {
	return &ArtistDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ArtistClient) DeleteOne(a *Artist) *ArtistDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ArtistClient) DeleteOneID(id int) *ArtistDeleteOne {
	return &ArtistDeleteOne{c.Delete().Where(artist.ID(id))}
}

// Create returns a query builder for Artist.
func (c *ArtistClient) Query() *ArtistQuery {
	return &ArtistQuery{config: c.config}
}

// Get returns a Artist entity by its id.
func (c *ArtistClient) Get(ctx context.Context, id int) (*Artist, error) {
	return c.Query().Where(artist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArtistClient) GetX(ctx context.Context, id int) *Artist {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// QuerySongs queries the songs edge of a Artist.
func (c *ArtistClient) QuerySongs(a *Artist) *SongQuery {
	query := &SongQuery{config: c.config}
	id := a.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(artist.Table, artist.FieldID, id),
		sqlgraph.To(song.Table, song.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, artist.SongsTable, artist.SongsColumn),
	)
	query.sql = sqlgraph.Neighbors(a.driver.Dialect(), step)

	return query
}

// SongClient is a client for the Song schema.
type SongClient struct {
	config
}

// NewSongClient returns a client for the Song from the given config.
func NewSongClient(c config) *SongClient {
	return &SongClient{config: c}
}

// Create returns a create builder for Song.
func (c *SongClient) Create() *SongCreate {
	return &SongCreate{config: c.config}
}

// Update returns an update builder for Song.
func (c *SongClient) Update() *SongUpdate {
	return &SongUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *SongClient) UpdateOne(s *Song) *SongUpdateOne {
	return c.UpdateOneID(s.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *SongClient) UpdateOneID(id int) *SongUpdateOne {
	return &SongUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Song.
func (c *SongClient) Delete() *SongDelete {
	return &SongDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SongClient) DeleteOne(s *Song) *SongDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SongClient) DeleteOneID(id int) *SongDeleteOne {
	return &SongDeleteOne{c.Delete().Where(song.ID(id))}
}

// Create returns a query builder for Song.
func (c *SongClient) Query() *SongQuery {
	return &SongQuery{config: c.config}
}

// Get returns a Song entity by its id.
func (c *SongClient) Get(ctx context.Context, id int) (*Song, error) {
	return c.Query().Where(song.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SongClient) GetX(ctx context.Context, id int) *Song {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}
