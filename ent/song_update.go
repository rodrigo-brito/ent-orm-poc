// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/predicate"
	"enttest/ent/song"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// SongUpdate is the builder for updating Song entities.
type SongUpdate struct {
	config
	name       *int
	addname    *int
	phone      *string
	clearphone bool
	plays      *int64
	addplays   *int64
	gender     *song.Gender
	predicates []predicate.Song
}

// Where adds a new predicate for the builder.
func (su *SongUpdate) Where(ps ...predicate.Song) *SongUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetName sets the name field.
func (su *SongUpdate) SetName(i int) *SongUpdate {
	su.name = &i
	su.addname = nil
	return su
}

// AddName adds i to name.
func (su *SongUpdate) AddName(i int) *SongUpdate {
	if su.addname == nil {
		su.addname = &i
	} else {
		*su.addname += i
	}
	return su
}

// SetPhone sets the phone field.
func (su *SongUpdate) SetPhone(s string) *SongUpdate {
	su.phone = &s
	return su
}

// SetNillablePhone sets the phone field if the given value is not nil.
func (su *SongUpdate) SetNillablePhone(s *string) *SongUpdate {
	if s != nil {
		su.SetPhone(*s)
	}
	return su
}

// ClearPhone clears the value of phone.
func (su *SongUpdate) ClearPhone() *SongUpdate {
	su.phone = nil
	su.clearphone = true
	return su
}

// SetPlays sets the plays field.
func (su *SongUpdate) SetPlays(i int64) *SongUpdate {
	su.plays = &i
	su.addplays = nil
	return su
}

// AddPlays adds i to plays.
func (su *SongUpdate) AddPlays(i int64) *SongUpdate {
	if su.addplays == nil {
		su.addplays = &i
	} else {
		*su.addplays += i
	}
	return su
}

// SetGender sets the gender field.
func (su *SongUpdate) SetGender(s song.Gender) *SongUpdate {
	su.gender = &s
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SongUpdate) Save(ctx context.Context) (int, error) {
	if su.name != nil {
		if err := song.NameValidator(*su.name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if su.plays != nil {
		if err := song.PlaysValidator(*su.plays); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"plays\": %v", err)
		}
	}
	if su.gender != nil {
		if err := song.GenderValidator(*su.gender); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"gender\": %v", err)
		}
	}
	return su.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SongUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SongUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SongUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SongUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   song.Table,
			Columns: song.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: song.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := su.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: song.FieldName,
		})
	}
	if value := su.addname; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: song.FieldName,
		})
	}
	if value := su.phone; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: song.FieldPhone,
		})
	}
	if su.clearphone {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldPhone,
		})
	}
	if value := su.plays; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: song.FieldPlays,
		})
	}
	if value := su.addplays; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: song.FieldPlays,
		})
	}
	if value := su.gender; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: song.FieldGender,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SongUpdateOne is the builder for updating a single Song entity.
type SongUpdateOne struct {
	config
	id         int
	name       *int
	addname    *int
	phone      *string
	clearphone bool
	plays      *int64
	addplays   *int64
	gender     *song.Gender
}

// SetName sets the name field.
func (suo *SongUpdateOne) SetName(i int) *SongUpdateOne {
	suo.name = &i
	suo.addname = nil
	return suo
}

// AddName adds i to name.
func (suo *SongUpdateOne) AddName(i int) *SongUpdateOne {
	if suo.addname == nil {
		suo.addname = &i
	} else {
		*suo.addname += i
	}
	return suo
}

// SetPhone sets the phone field.
func (suo *SongUpdateOne) SetPhone(s string) *SongUpdateOne {
	suo.phone = &s
	return suo
}

// SetNillablePhone sets the phone field if the given value is not nil.
func (suo *SongUpdateOne) SetNillablePhone(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetPhone(*s)
	}
	return suo
}

// ClearPhone clears the value of phone.
func (suo *SongUpdateOne) ClearPhone() *SongUpdateOne {
	suo.phone = nil
	suo.clearphone = true
	return suo
}

// SetPlays sets the plays field.
func (suo *SongUpdateOne) SetPlays(i int64) *SongUpdateOne {
	suo.plays = &i
	suo.addplays = nil
	return suo
}

// AddPlays adds i to plays.
func (suo *SongUpdateOne) AddPlays(i int64) *SongUpdateOne {
	if suo.addplays == nil {
		suo.addplays = &i
	} else {
		*suo.addplays += i
	}
	return suo
}

// SetGender sets the gender field.
func (suo *SongUpdateOne) SetGender(s song.Gender) *SongUpdateOne {
	suo.gender = &s
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *SongUpdateOne) Save(ctx context.Context) (*Song, error) {
	if suo.name != nil {
		if err := song.NameValidator(*suo.name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if suo.plays != nil {
		if err := song.PlaysValidator(*suo.plays); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"plays\": %v", err)
		}
	}
	if suo.gender != nil {
		if err := song.GenderValidator(*suo.gender); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"gender\": %v", err)
		}
	}
	return suo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SongUpdateOne) SaveX(ctx context.Context) *Song {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SongUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SongUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SongUpdateOne) sqlSave(ctx context.Context) (s *Song, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   song.Table,
			Columns: song.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  suo.id,
				Type:   field.TypeInt,
				Column: song.FieldID,
			},
		},
	}
	if value := suo.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: song.FieldName,
		})
	}
	if value := suo.addname; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: song.FieldName,
		})
	}
	if value := suo.phone; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: song.FieldPhone,
		})
	}
	if suo.clearphone {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldPhone,
		})
	}
	if value := suo.plays; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: song.FieldPlays,
		})
	}
	if value := suo.addplays; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: song.FieldPlays,
		})
	}
	if value := suo.gender; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: song.FieldGender,
		})
	}
	s = &Song{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
