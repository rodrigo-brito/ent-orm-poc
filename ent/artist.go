// Code generated by entc, DO NOT EDIT.

package ent

import (
	"enttest/ent/artist"
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Artist is the model entity for the Artist schema.
type Artist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone *string `json:"phone,omitempty"`
	// Plays holds the value of the "plays" field.
	Plays int64 `json:"plays,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender artist.Gender `json:"gender,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArtistQuery when eager-loading is set.
	Edges ArtistEdges `json:"edges"`
}

// ArtistEdges holds the relations/edges for other nodes in the graph.
type ArtistEdges struct {
	// Songs holds the value of the songs edge.
	Songs []*Song
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SongsOrErr returns the Songs value or an error if the edge
// was not loaded in eager-loading.
func (e ArtistEdges) SongsOrErr() ([]*Song, error) {
	if e.loadedTypes[0] {
		return e.Songs, nil
	}
	return nil, &NotLoadedError{edge: "songs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Artist) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // slug
		&sql.NullInt64{},  // age
		&sql.NullString{}, // phone
		&sql.NullInt64{},  // plays
		&sql.NullString{}, // gender
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Artist fields.
func (a *Artist) assignValues(values ...interface{}) error {
	if m, n := len(values), len(artist.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field slug", values[0])
	} else if value.Valid {
		a.Slug = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field age", values[1])
	} else if value.Valid {
		a.Age = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field phone", values[2])
	} else if value.Valid {
		a.Phone = new(string)
		*a.Phone = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field plays", values[3])
	} else if value.Valid {
		a.Plays = value.Int64
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field gender", values[4])
	} else if value.Valid {
		a.Gender = artist.Gender(value.String)
	}
	return nil
}

// QuerySongs queries the songs edge of the Artist.
func (a *Artist) QuerySongs() *SongQuery {
	return (&ArtistClient{a.config}).QuerySongs(a)
}

// Update returns a builder for updating this Artist.
// Note that, you need to call Artist.Unwrap() before calling this method, if this Artist
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Artist) Update() *ArtistUpdateOne {
	return (&ArtistClient{a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Artist) Unwrap() *Artist {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Artist is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Artist) String() string {
	var builder strings.Builder
	builder.WriteString("Artist(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", slug=")
	builder.WriteString(a.Slug)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", a.Age))
	if v := a.Phone; v != nil {
		builder.WriteString(", phone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", plays=")
	builder.WriteString(fmt.Sprintf("%v", a.Plays))
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", a.Gender))
	builder.WriteByte(')')
	return builder.String()
}

// Artists is a parsable slice of Artist.
type Artists []*Artist

func (a Artists) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
