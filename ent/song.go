// Code generated by entc, DO NOT EDIT.

package ent

import (
	"enttest/ent/song"
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Song is the model entity for the Song schema.
type Song struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name int `json:"name,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone *string `json:"phone,omitempty"`
	// Plays holds the value of the "plays" field.
	Plays int64 `json:"plays,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender       song.Gender `json:"gender,omitempty"`
	artist_songs *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Song) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // name
		&sql.NullString{}, // phone
		&sql.NullInt64{},  // plays
		&sql.NullString{}, // gender
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Song) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // artist_songs
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Song fields.
func (s *Song) assignValues(values ...interface{}) error {
	if m, n := len(values), len(song.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		s.Name = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field phone", values[1])
	} else if value.Valid {
		s.Phone = new(string)
		*s.Phone = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field plays", values[2])
	} else if value.Valid {
		s.Plays = value.Int64
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field gender", values[3])
	} else if value.Valid {
		s.Gender = song.Gender(value.String)
	}
	values = values[4:]
	if len(values) == len(song.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field artist_songs", value)
		} else if value.Valid {
			s.artist_songs = new(int)
			*s.artist_songs = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this Song.
// Note that, you need to call Song.Unwrap() before calling this method, if this Song
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Song) Update() *SongUpdateOne {
	return (&SongClient{s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Song) Unwrap() *Song {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Song is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Song) String() string {
	var builder strings.Builder
	builder.WriteString("Song(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", name=")
	builder.WriteString(fmt.Sprintf("%v", s.Name))
	if v := s.Phone; v != nil {
		builder.WriteString(", phone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", plays=")
	builder.WriteString(fmt.Sprintf("%v", s.Plays))
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", s.Gender))
	builder.WriteByte(')')
	return builder.String()
}

// Songs is a parsable slice of Song.
type Songs []*Song

func (s Songs) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
