// Code generated by entc, DO NOT EDIT.

package song

import (
	"enttest/ent/predicate"

	"github.com/facebookincubator/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Song {
	return predicate.Song(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	},
	)
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	},
	)
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	},
	)
}

// Plays applies equality check predicate on the "plays" field. It's identical to PlaysEQ.
func Plays(v int64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlays), v))
	},
	)
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	},
	)
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	},
	)
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...int) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	},
	)
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...int) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	},
	)
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	},
	)
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	},
	)
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	},
	)
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	},
	)
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	},
	)
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	},
	)
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhone), v...))
	},
	)
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	},
	)
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	},
	)
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	},
	)
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	},
	)
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	},
	)
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	},
	)
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	},
	)
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	},
	)
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPhone)))
	},
	)
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPhone)))
	},
	)
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	},
	)
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	},
	)
}

// PlaysEQ applies the EQ predicate on the "plays" field.
func PlaysEQ(v int64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlays), v))
	},
	)
}

// PlaysNEQ applies the NEQ predicate on the "plays" field.
func PlaysNEQ(v int64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlays), v))
	},
	)
}

// PlaysIn applies the In predicate on the "plays" field.
func PlaysIn(vs ...int64) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlays), v...))
	},
	)
}

// PlaysNotIn applies the NotIn predicate on the "plays" field.
func PlaysNotIn(vs ...int64) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlays), v...))
	},
	)
}

// PlaysGT applies the GT predicate on the "plays" field.
func PlaysGT(v int64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlays), v))
	},
	)
}

// PlaysGTE applies the GTE predicate on the "plays" field.
func PlaysGTE(v int64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlays), v))
	},
	)
}

// PlaysLT applies the LT predicate on the "plays" field.
func PlaysLT(v int64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlays), v))
	},
	)
}

// PlaysLTE applies the LTE predicate on the "plays" field.
func PlaysLTE(v int64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlays), v))
	},
	)
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	},
	)
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	},
	)
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	},
	)
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Song) predicate.Song {
	return predicate.Song(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for _, p := range predicates {
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Song) predicate.Song {
	return predicate.Song(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for i, p := range predicates {
				if i > 0 {
					s1.Or()
				}
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Song) predicate.Song {
	return predicate.Song(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
